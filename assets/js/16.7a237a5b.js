(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{343:function(n,a,s){"use strict";s.r(a);var e=s(3),t=Object(e.a)({},function(){var n=this,a=n.$createElement,s=n._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("p",[n._v("  Iterator是一种接口，为不同的数据结构提供统一的数据访问机制。\n  for...of是ES6引入的一种遍历所有数据接口的方法。")]),n._v(" "),s("h2",{attrs:{id:"iterator有何用途"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iterator有何用途","aria-hidden":"true"}},[n._v("#")]),n._v(" Iterator有何用途")]),n._v(" "),s("ol",[s("li",[n._v("为各种数据提供统一的接口；")]),n._v(" "),s("li",[n._v("使得数据结构的成员能够按照某种次序排列；")]),n._v(" "),s("li",[n._v("为for...of服务，供for...of消费。")])]),n._v(" "),s("h2",{attrs:{id:"iterator概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iterator概念","aria-hidden":"true"}},[n._v("#")]),n._v(" Iterator概念")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("var it = makeIterator(['a', 'b']);\n\nit.next() // { value: \"a\", done: false }\nit.next() // { value: \"b\", done: false }\nit.next() // { value: undefined, done: true }\n\nfunction makeIterator(array) {\n  var nextIndex = 0;\n  return {\n    next: function() {\n      return nextIndex < array.length ?\n        {value: array[nextIndex++], done: false} :\n        {value: undefined, done: true};\n    }\n  };\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])]),s("p",[n._v("注释：")]),n._v(" "),s("ol",[s("li",[n._v("makeIterator函数是一个遍历器生成函数，作用就是返回一个遍历器对象it。")]),n._v(" "),s("li",[n._v("next方法是用来移动位置的，每次调用都会返回一个对象{value:'', done:true/false}，value就是返回当前遍历位置的值，done表示是否遍历结束。")])]),n._v(" "),s("h2",{attrs:{id:"iterator接口实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iterator接口实现","aria-hidden":"true"}},[n._v("#")]),n._v(" Iterator接口实现")]),n._v(" "),s("p",[n._v("  一种数据结构只要部署了 Iterator 接口，我们就称这种数据结构是“可遍历的”（iterable）。ES6规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性。\n  已默认部署 Iterator 接口的对象主要包括Array、String、Set、Map 、类似数组的对象(如arguments对象、DOM NodeList对象)。\n  对象（Object）之所以没有默认部署 Iterator 接口，是因为对象的哪个属性先遍历，哪个属性后遍历是不确定的，需要开发者手动指定。")]),n._v(" "),s("blockquote",[s("p",[n._v("对象Iterator接口实现")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("let obj = {\n  data: [ 'hello', 'world' ],\n  [Symbol.iterator]() {\n    const self = this;\n    let index = 0;\n    return {\n      next() {\n        if (index < self.data.length) {\n          return {\n            value: self.data[index++],\n            done: false\n          };\n        } else {\n          return { value: undefined, done: true };\n        }\n      }\n    };\n  }\n};\nfor (var val of obj) {\n  console.log(val);\n} \n// 打印键值\"hello\"、\"world\"\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br")])]),s("h2",{attrs:{id:"iterator应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iterator应用场景","aria-hidden":"true"}},[n._v("#")]),n._v(" Iterator应用场景")]),n._v(" "),s("ol",[s("li",[n._v("解构赋值")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("var iterableObj = {\n    items: ['红','绿','蓝'],\n    [Symbol.iterator]: function () {\n        var self = this;\n        var i = 0;\n        return {\n            next: function () {\n                var done = (i >= self.items.length);\n                var value = !done ? self.items[i++] : undefined;\n                return {\n                    done: done,\n                    value: value\n                };\n            }\n        };\n    }}\n    var [d,e] = iterableObj;\n    console.log(d,e);//红 绿\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br")])]),s("ol",{attrs:{start:"2"}},[s("li",[n._v("扩展运算符(...)")]),n._v(" "),s("li",[n._v("yield*")])]),n._v(" "),s("h2",{attrs:{id:"for-of运行机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-of运行机制","aria-hidden":"true"}},[n._v("#")]),n._v(" for...of运行机制")]),n._v(" "),s("p",[n._v("执行for...of其实就是调用遍历器生成函数，然后依次执行遍历器对象的next方法，将next方法返回的值（value）赋值给for...of中的变量。")]),n._v(" "),s("h2",{attrs:{id:"for-in和for-of"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-in和for-of","aria-hidden":"true"}},[n._v("#")]),n._v(" for in和for of")]),n._v(" "),s("ol",[s("li",[n._v("for in遍历数组的键名，for in 遍历的是数组的键值。")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("var myObject ={\n   a:'1',\n   b:'2',\n   c:'3'\n}\nmyObject.__proto__.d = '4';\nfor (var key in myObject) {\n　　if(myObject.hasOwnProperty(key)){\n　　　　console.log(key);\n　　}\n}\n// 只打印实例属性的键名\"a\"、\"b\"、\"c\"\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("var myArray = ['1','2','3']\n\nfor (var val of myArray) {\n    console.log(val);\n} \n// 打印键值\"1\"、\"2\"、\"3\"\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("ol",{attrs:{start:"2"}},[s("li",[n._v("for in\n（1）遍历顺序不一定\n（2）遍历所有可枚举的属性，包括原型上的属性和方法\n  for in更适合遍历对象，不适合遍历数组；遍历对象时，如果不想要原型上的属性和方法，可以通过hasOwnProperty来判断该属性是不是实例的属性，这实际上跟Object.keys(myObj)得到的结果一样。")]),n._v(" "),s("li",[n._v("for of\n  更适合遍历数组、数组对象、字符串、Map、Set等拥有迭代器对象的集合，但是不能遍历对象，如果要遍历，需要实现Symbol.interator属性；\n  相对于forEach，可以响应break、continue、return语句。")])])])},[],!1,null,null,null);a.default=t.exports}}]);