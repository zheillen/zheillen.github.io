(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{343:function(n,s,e){"use strict";e.r(s);var t=e(3),a=Object(t.a)({},function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[n._v("组件复用")]),n._v(" "),e("h2",{attrs:{id:"render-props"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#render-props","aria-hidden":"true"}},[n._v("#")]),n._v(" Render Props")]),n._v(" "),e("p",[n._v("分享一个组件的state到其他需要相同state的组件。")]),n._v(" "),e("blockquote",[e("p",[n._v("实例")])]),n._v(" "),e("p",[n._v("  跟踪并显示在页面上鼠标点击的位置，然后在点击的位置显示一张图片。\n  这里封装了两个组件：Mouse组件用来完成跟踪并显示鼠标的位置；Cat组件用来显示鼠标点击位置的图片。Mouse组件通过render这个方法属性来动态渲染Cat组件，这样Cat组件内部就可以使用Mouse组件的state。\n  render prop是一个用于告知组件需要渲染什么内容的函数prop。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import React from 'react';\nimport Cat from './Cat';\nimport Mouse from './Mouse';\nfunction Example(){\n    return (\n        <div style={{ height: '500px' }}>\n            <h1>点击鼠标!</h1>\n            <Mouse render={(position) => <Cat position= {position}/>}/>\n        </div>\n    );\n}\n\nexport default Example;\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import React, { useState } from 'react';\n\nfunction Mouse(props){\n    const [position, setPosition] = useState({ x: 0, y: 0 });\n    const mouseMove = (event) => {\n        setPosition({\n            x: event.clientX,\n            y: event.clientY\n        });\n    };\n    const children = props.render(position);\n    return (\n        <div style={{ height: '500px' }} onClick={mouseMove}>\n            <h1>鼠标的位置是 ({position.x}, {position.y})</h1>\n            {children}\n        </div>\n    );\n}\n\nexport default Mouse;\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function Cat(props){\n    const { position } = props;\n    let imgUrl = require('@/assets/images/login-logo.png');\n    return <img src={imgUrl} style={{ position: 'absolute', left: position.x, top: position.y }} />;\n\n}\nexport default Cat;\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])]),e("h2",{attrs:{id:"higher-order-components-高阶组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#higher-order-components-高阶组件","aria-hidden":"true"}},[n._v("#")]),n._v(" Higher-order Components(高阶组件)")]),n._v(" "),e("p",[n._v("  高阶组件(HOC, higher order components)是React中对组件逻辑进行重用的高级技术，本身并不是React API，只是一种模式。\n  高阶组件是一个函数，该函数接受一个组件作为参数，并返回一个新的组件。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("const EnhancedComponent = higerOrderComponent(WrappedComponent);\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("p",[n._v("  高阶组件的精华是抽象出一个模式，该模式允许我们在一个地方定义逻辑，并能对所有组件只用。")]),n._v(" "),e("blockquote",[e("p",[n._v("实例")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import { Component } from 'react';\n\nexport function hocComponent(WrappedComponent) {\n    return class extends Component {\n        render() {\n            return (<div>\n                <div className=\"title\">{this.props.title}</div>\n                <WrappedComponent {...this.props} />\n            </div>);\n        }\n    };\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br")])]),e("p",[n._v("新建Example.js组件中使用高阶组件，返回新的组件")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import { hocComponent } from './hocComponent';\nimport Component from './Component';\n\nexport default function Example() {\n    return hocComponent(Component);\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("p",[n._v("调用Example组件")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<Example title="test"/>\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("blockquote",[e("p",[n._v("应用")])]),n._v(" "),e("ul",[e("li",[n._v("react-redux中的connect方法")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("const ConnectedComment = connect(commentSelector, commentActions)(CommentList);\n//可拆分成\n// connect 是一个函数，它的返回值为另外一个函数。\nconst enhance = connect(commentListSelector, commentListActions);\n// 返回值为 HOC，它会返回已经连接 Redux store 的组件\nconst ConnectedComment = enhance(CommentList);\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("ul",[e("li",[n._v("react-router中的withRouter")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("const withRouter = ( Component ) => () => <Route component={ Component }/>\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])])])},[],!1,null,null,null);s.default=a.exports}}]);